import os
import shutil
import pandas as pd
import pyzipper
from datetime import datetime, timedelta
import nc_py_api
from secret_functions import generate_random_password, create_one_time_secret_link
from email_functions import send_sharePassword_email, send_link_and_zipPassword_email
import shutil


# The function deletes all files with the extension ".zip" in the nextcloud
def delete_Files(nc):
    all_zip_files = nc.files.find(["like", "name", "%.zip"])
    for zip_file in all_zip_files:
        nc.files.delete(zip_file)


# The function reads a CSV file, searches for PDF files in a folder, extracts the IP address from the file name,
# + creates folders based on the assigned email addresses
# + copies the corresponding PDF files to the corresponding folders in the upload folder
def sort_pdfs(pdf_folder, csv_file, upload_folder):
    if not os.path.exists(upload_folder):
        os.makedirs(upload_folder)

    ip_email_csv = pd.read_csv(csv_file)

    for pdf_file in os.listdir(pdf_folder):
        ip_address = pdf_file.rsplit("_", 1)[-1].rsplit(".", 1)[0]

        if ip_address in ip_email_csv["IP"].values:
            email = ip_email_csv[ip_email_csv["IP"] == ip_address]["Email"].values[0]

            email_folder = os.path.join(upload_folder, email)
            if not os.path.exists(email_folder):
                os.makedirs(email_folder)

            old_pdf_path = os.path.join(pdf_folder, pdf_file)
            new_pdf_path = os.path.join(email_folder, pdf_file)
            shutil.copy(old_pdf_path, new_pdf_path)


# The function uploads a file with the specified file name to the Nextcloud
# The name of the file in Nextcloud is defined by "nextcloud_file_name"
def upload_file(nc, file_name, nextcloud_file_name):
    file_path = os.path.join(os.path.dirname(__file__), file_name)
    with open(file_path, "rb") as file_stream:
        nc.files.upload_stream(nextcloud_file_name, file_stream)


# The function generates a random password, creates a link with an expiration date for the file
def create_link_with_password_to_NextCloud(nc, file_name):
    nextcloud_password = generate_random_password()
    expiration_date = datetime.now() + timedelta(days=1) #TODO

    sharing_api = nc_py_api.files.sharing._FilesSharingAPI(nc._session)
    kwargs = {"password": nextcloud_password, "expire_date": expiration_date}

    share = sharing_api.create(file_name, nc_py_api.files.sharing.ShareType.TYPE_LINK, **kwargs)
    return share.url, nextcloud_password


# The function zips and encrypts the contents of the source folder in a ZIP file with a password
def create_zip_folder(source_folder, output_zip_path, password):
    with pyzipper.AESZipFile(output_zip_path,"w",compression=pyzipper.ZIP_DEFLATED,encryption=pyzipper.WZ_AES,) as zip_file:
        zip_file.pwd = password.encode()

        for root, dirs, files in os.walk(source_folder):
            for file in files:
                file_path = os.path.join(root, file)
                zip_file.write(file_path, os.path.relpath(file_path, source_folder))


# The function creates ZIP files for each subdirectory in the upload_folder
# + encrypts them with random passwords
# + uploads them to the Nextcloud
# + sends two emails for each subdirectory
def zip_and_upload_Files(upload_folder, nc):
    email_subfolders = [
        folder
        for folder in os.listdir(upload_folder)
        if os.path.isdir(os.path.join(upload_folder, folder))
    ]

    for email_subfolder in email_subfolders:
        old_path = os.path.join(upload_folder, email_subfolder)
        new_zip_path = os.path.join(upload_folder, f"{email_subfolder}.zip")

        zip_password = generate_random_password()
        create_zip_folder(old_path, new_zip_path, zip_password)
        zip_password_OTS_link = create_one_time_secret_link(zip_password)

        nextcloud_file_name = f"{email_subfolder}.zip"
        upload_file(nc, new_zip_path, nextcloud_file_name)
        share_url, password = create_link_with_password_to_NextCloud(
            nc, nextcloud_file_name
        )
        share_password_OTS_link = create_one_time_secret_link(password)

        #TODO sender
        send_link_and_zipPassword_email(
            "Your Name <from@example.com>",
            f"{email_subfolder}",
            "Security Vulnerability Scan Report - (Share Link and ZIP Password)",
            share_url, 
            zip_password_OTS_link,
        )

        #TODO sender
        send_sharePassword_email(
            "Your Name <from@example.com>",
            f"{email_subfolder}",
            "Security Vulnerability Scan Report - (Share Password)",
            share_password_OTS_link
        )

        print("_______________________________________")
        print("Receiver:",email_subfolder)
        print("Share Link:",share_url)
        print("OneTimeSecret_zip_password:",zip_password_OTS_link)
        print("OneTimeSecret_Share_Password:",share_password_OTS_link)


# The function assigns the tag with the name "tag_name" to all files in the root directory of the Nextcloud
def add_tags(nc, tag_name):
    tag = nc.files.tag_by_name(tag_name)

    all_files = nc.files.listdir("/")
    for file in all_files:
        nc.files.assign_tag(file, tag)


if __name__ == "__main__":
    # Login to Nextcloud
    nc = nc_py_api.Nextcloud(
        nextcloud_url="https://nextcloud.bwinfosec.uni-heidelberg.de",
        nc_auth_user="USERNAME",
        nc_auth_pass="PASSWORD",
    )

    # Deletes the remaining Nextcloud (ZIP) files
    delete_Files(nc)

    # Sorts the PDFs by their email addresses
    pdf_folder = "current_report\single_hosts"
    csv_file = "IP_Email.csv" 
    upload_folder = f"{datetime.now().date()}_upload_zip"
    sort_pdfs(pdf_folder, csv_file, upload_folder)

    # Zips and encrypts the folder with a password
    # + uploads the zip-files to the nextcloud (with a password for the Nextcloud Share)
    # + sends emails
    zip_and_upload_Files(upload_folder, nc)

    # Adds "TEST"-tag to the uploaded files
    tag_name = "TEST" #TODO #Namen Ã¤ndern + TESTEN!
    add_tags(nc, tag_name)

    # Move contents of "current_report" to new_folder
    new_folder = f"{datetime.now().strftime('%Y-%m-%d')}_original_report"
    os.makedirs(new_folder, exist_ok=True)

    for file in os.listdir("current_report"):
        old_path = os.path.join("current_report", file)
        new_path = os.path.join(new_folder, file)
        shutil.move(old_path, new_path)